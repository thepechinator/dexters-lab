{% extends './_layout.nunj' %}

{% block content %}
  <h1>Basics</h1>

  <ul>
    <li class="text-normal slide">
      Implicit 'strict' mode
    </li>
    <li class="text-normal slide">
      let, const
    </li>
  </ul>

  <div class="block-normal text-normal slide">
    let finally provides variables with lexical scope! No more hoisting!
  </div>

  <div class="block-normal text-normal slide">
    Hoisting? What's that?
  </div>

  <div class="slide">
    <div>
  {% call build_example() %}
// Refresher: var and hoisting

// JavaScript's traditional 'var' keyword are
// scoped to two things only: global and functions.
// If you declare them in an if or loop statement,
// they will be 'hoisted' to the top of your code.
var jedi = 'anakin';

function exampleOne() {
  // This will output 'undefined'-- not 'anakin'--
  // since the declaration in the if statement will
  // be hoisted to the top of this function body.
  // The assignment will remain in the if statement.
  // See exampleTwo to see what I mean.
	console.log('#1', jedi);
  if (true) {
  	var jedi = "windu";
  }
}

// Shows the syntax of what is really happening
// from exampleOne.
function exampleTwo() {
  var jedi;
  // Will output 'undefined' for jedi, similar to
  // exampleOne.
  console.log('#2', jedi);
  if (true) {
    jedi = 'windu';
  }
}

function exampleThree() {
  // Declaring no variables will output what you may
  // have expected from the very beginning.
	console.log('#3', jedi);

  // The assignment here references the 'jedi' var
  // in the outer scope.
  jedi = 'windu';
  console.log(jedi);
}

exampleOne();
exampleTwo();
exampleThree();
  {% endcall %}
    </div>
  </div>

  <div class="block-normal text-normal slide">
    let to the rescue!
  </div>

  <div class="slide">
    <div>
  {% call build_example() %}
// new keyword: let

// This lets us have block-scoped variables.
// Meaning, if we use it within things like an if, loop,
// and other block statements, it will be visible only
// in the scope it was defined. This is a change from
// variables defined with 'var'.

// Example 1
// Take our first example from the var example.
var myJedi = 'anakin';
function exampleOne() {
  // It displays 'anakin'-- not 'undefined'!
  // Yay! Banzai! Huzzah!
	console.log('#1', myJedi);

  if (true) {
    // Instead of using var, we use let, which
    // keeps this variable scoped to only this block.
  	let myJedi = 'windu';
  }

  // It will still be 'anakin'
  console.log(myJedi);
}
exampleOne();

// Example 2
// jedi is scoped to the if statement
if (true) {
  let jedi = 'obi-wan';
}
// This will fail because something is in its own block,
// and 'let' just scopes it to that.
try {
  console.log(jedi);
} catch (e) {
  // Will output 'jedi is not defined'
  console.log('#2 output', e.message);
}

// Example 3
// Defining a block is as simple as
// surrounding something in brackets!
{
	let jedi = 'obi-wan';
}

// This will still fail.
try {
  console.log(jedi);
} catch (e) {
  // Will output 'jedi is not defined'
  console.log('#3 output', e.message);
}
  {% endcall %}
    </div>
  </div>
{% endblock %}
