{% extends './_layout.nunj' %}

{% block content %}
  <h1>Generators</h1>

  <ul>
    <li class="text-normal slide">
      Iterators
    </li>
    <li class="text-normal slide">
      For of
    </li>
    <li class="text-normal slide">
      Generators
    </li>
  </ul>

  <div class="slide">
    <div>
  {% call build_example() %}
// Generators example

// Defined by *function and yield
// They are iterative algorithms that take care of
// maintaining their own state.

// They do this with the help of yield expressions.
// For example:

// function* is the first step to making
// a generator. The second is using yield
// in the function body.
function* uuid() {
	let index = 0;
  // When you define a yield statement, it returns
  // that value and halts execution of that function.
  // Meaning, in this case, you can continue
  // generating new, unique values.
  while(true) {
  	yield `xxxxx-xxxx-xxxx-${index}`;
    index++;
  }
}

// uuid() will return an iterator which can call
// .next() on to proceed to the next yield.
var generator = uuid();

// .value is what is returned by the generator.
// Notice how it goes up by 1 each time we
// call .next.
console.log(generator.next().value);
console.log(generator.next().value);
console.log(generator.next().value);
  {% endcall %}
    </div>
  </div>

  <ul class="slide">
    ref:
    <li class="text-small">
      <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators" target="_blank">
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators
      </a>
    </li>
  </ul>
{% endblock %}
