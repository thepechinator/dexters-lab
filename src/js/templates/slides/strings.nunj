{% extends './_layout.nunj' %}

{% block content %}
  <h1>Template strings</h1>

  <ul>
    <li class="text-normal slide">
      multiline strings
    </li>
    <li class="text-normal slide">
      variable interpolation
    </li>
  </ul>

  <div class="slide">
    <div>
  {% call build_example() %}
// template strings example

// Example 1
function exampleOne() {
  // With the help of backticks (`), a multiline string is as easy
  // as this. I'm not scared of you anymore, multiline html
  // strings!
  var htmlString =
`<div class="row">
  <div class="column small-12">
    <a class="button normal small-12">I am a button</a>
  </div>
</div>`;

  // Here is what it looks like in the console.
  // Notice how all the whitespace is preserved. Nice!
  console.log('#1', htmlString);

  // $$ is a special reserved variable that
  // corresponds to a jQuery object representing
  // the container under the HTML Output tab.
  // Go crazy with it.
  $$.html('#1' + htmlString);
};

// Example 2
// How about variable interpolation? Piece of cake.
function exampleTwo() {
  var superman = 'Clark Kent';
  var batman = 'Bruce Wayne';

  // Note that the ${} is how you interpolate your
  // variables in template strings.
  var propString =
`superman is ${superman}
and batman is ${batman}`;

  console.log('#2', propString);
};

// Example 3
// There is also the concept of tagged template strings.
// It lets you prepend a function name to a template string,
// which then has access to an array of all the regular strings
// and the variables in the template string.
function exampleThree() {
  var superman = 'Clark Kent';
  var batman = 'Bruce Wayne';

  function myTagFunction(strings, ...values) {
    console.log('#3');
    console.log('strings[0]', strings[0]);
    console.log('values[0]', values[0]);
    console.log('strings[1]', strings[1]);
    console.log('values[1]', values[1]);

    return 'But Joker is Joker';
  }
  // Note that the ${} is how you interpolate your
  // variables in template strings.
  var propString =
myTagFunction`superman is ${superman}
and batman is ${batman}`;

  // Note how propString is equal to whatever was returned
  // by the tag function.
  console.log(propString);
};

// exampleOne();
// exampleTwo();
// exampleThree();
  {% endcall %}
    </div>
  </div>

  <ul>
    <li class="text-small slide">
      <span class="text-small">ref:</span>
      <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings" target="_blank">
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings
      </a>
    </li>
  </ul>
{% endblock %}
